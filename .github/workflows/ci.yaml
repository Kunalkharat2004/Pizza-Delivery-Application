name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write    # Needed for uploading SARIF results
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      # Debug directory structure
      - name: Debug Directory Structure
        run: |
          echo "Current working directory: $(pwd)"
          echo "Directory structure:"
          find . -type d -maxdepth 3 | sort
          
      # Dependency scanning
      - name: Install dependencies
        run: npm ci
        
      # OWASP Dependency-Check for vulnerabilities
      - name: OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'NodeJS-TypeScript-Project'
          path: '.'
          format: 'HTML JSON'
          out: './dependency-check'  # Changed from 'reports/dependency-check'
          args: >
            --failOnCVSS 8
            --enableExperimental
            --suppression dependency-check-suppression.xml
            --scan "**/*.js,**/*.ts,package.json,package-lock.json"
            
      # Upload dependency check results as artifacts
      - name: Archive dependency check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: ./dependency-check
          
      # Debug dependency check results
      - name: Debug Dependency Check Results
        run: |
          echo "Searching for dependency check report:"
          find . -name "dependency-check-report.json" -type f || echo "No dependency check report found"
          
      # Parse dependency check results and send to API
      - name: Parse and send dependency check results
        run: |
          # Try the specific path first
          REPORT_PATH="./dependency-check/dependency-check-report.json"
          if [ ! -f "$REPORT_PATH" ]; then
            # Try alternative locations if needed
            FOUND_REPORT=$(find . -name "dependency-check-report.json" -type f | head -n 1)
            if [ -n "$FOUND_REPORT" ]; then
              REPORT_PATH="$FOUND_REPORT"
            fi
          fi
          
          # Check if file exists before processing
          if [ -f "$REPORT_PATH" ]; then
            echo "Found dependency check report at $REPORT_PATH"
            # Count vulnerabilities by severity
            CRITICAL=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL")] | length' $REPORT_PATH)
            HIGH=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "HIGH")] | length' $REPORT_PATH)
            MEDIUM=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "MEDIUM")] | length' $REPORT_PATH)
            LOW=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "LOW")] | length' $REPORT_PATH)
            
            # Extract details for top vulnerabilities
            DETAILS=$(jq '[.Results[].Vulnerabilities[] | {package: .PkgName, vulnerabilityId: .VulnerabilityID, severity: .Severity, installedVersion: .InstalledVersion, fixedVersion: .FixedVersion}] | sort_by(.severity) | reverse | .[0:10]' $REPORT_PATH)
            
            # Create payload
            PAYLOAD=$(jq -n \
              --arg buildId "$GITHUB_RUN_ID" \
              --argjson critical "${CRITICAL:-0}" \
              --argjson high "${HIGH:-0}" \
              --argjson medium "${MEDIUM:-0}" \
              --argjson low "${LOW:-0}" \
              --argjson details "$DETAILS" \
              '{
                "scanType": "trivy",
                "buildId": $buildId,
                "data": {
                  "vulnerabilities": {
                    "critical": $critical,
                    "high": $high,
                    "medium": $medium,
                    "low": $low
                  },
                  "details": $details
                }
              }')
            
            # Send to API with Github metadata
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "X-Github-Repository: $GITHUB_REPOSITORY" \
              -H "X-Github-Ref: $GITHUB_REF" \
              -H "X-Github-SHA: $GITHUB_SHA" \
              -d "$PAYLOAD" \
              ${API_ENDPOINT}api/security/webhook/scan-results
          else
            echo "Trivy report not found, sending empty results"
            # Create empty results payload
            PAYLOAD=$(jq -n \
              --arg buildId "$GITHUB_RUN_ID" \
              '{
                "scanType": "trivy",
                "buildId": $buildId,
                "data": {
                  "vulnerabilities": {
                    "critical": 0,
                    "high": 0,
                    "medium": 0,
                    "low": 0
                  },
                  "details": []
                }
              }')
              
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "X-Github-Repository: $GITHUB_REPOSITORY" \
              -H "X-Github-Ref: $GITHUB_REF" \
              -H "X-Github-SHA: $GITHUB_SHA" \
              -d "$PAYLOAD" \
              ${API_ENDPOINT}api/security/webhook/scan-results
          fi
          
      # Push Docker image if all checks pass
      - name: Push Docker image
        run: |
          docker push ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
          
          # Send deployment notification
          PAYLOAD=$(jq -n \
            --arg buildId "$GITHUB_RUN_ID" \
            --arg image "${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}" \
            '{
              "eventType": "deployment",
              "buildId": $buildId,
              "data": {
                "image": $image,
                "status": "success",
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }
            }')
          
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-Github-Repository: $GITHUB_REPOSITORY" \
            -H "X-Github-Ref: $GITHUB_REF" \
            -H "X-Github-SHA: $GITHUB_SHA" \
            -d "$PAYLOAD" \
            ${API_ENDPOINT}api/deployments/webhook by severity
            CRITICAL=$(jq '.dependencies | map(.vulnerabilities? // []) | flatten | map(select(.severity == "CRITICAL")) | length' $REPORT_PATH)
            HIGH=$(jq '.dependencies | map(.vulnerabilities? // []) | flatten | map(select(.severity == "HIGH")) | length' $REPORT_PATH)
            MEDIUM=$(jq '.dependencies | map(.vulnerabilities? // []) | flatten | map(select(.severity == "MEDIUM")) | length' $REPORT_PATH)
            LOW=$(jq '.dependencies | map(.vulnerabilities? // []) | flatten | map(select(.severity == "LOW")) | length' $REPORT_PATH)
            
            # Extract details for the top vulnerabilities
            DETAILS=$(jq '[.dependencies | map(select(.vulnerabilities != null)) | .[] | .vulnerabilities[] | {dependency: .packageName, vulnerability: .name, severity: .severity, cvss: .cvssv3?.baseScore}] | sort_by(.cvss) | reverse | .[0:10]' $REPORT_PATH)
            
            # Create the payload
            PAYLOAD=$(jq -n \
              --arg buildId "$GITHUB_RUN_ID" \
              --argjson critical "$CRITICAL" \
              --argjson high "$HIGH" \
              --argjson medium "$MEDIUM" \
              --argjson low "$LOW" \
              --argjson details "$DETAILS" \
              '{
                "scanType": "dependency-check",
                "buildId": $buildId,
                "data": {
                  "vulnerabilities": {
                    "critical": $critical,
                    "high": $high,
                    "medium": $medium,
                    "low": $low
                  },
                  "details": $details
                }
              }')
            
            # Send to API with Github metadata
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "X-Github-Repository: $GITHUB_REPOSITORY" \
              -H "X-Github-Ref: $GITHUB_REF" \
              -H "X-Github-SHA: $GITHUB_SHA" \
              -d "$PAYLOAD" \
              ${API_ENDPOINT}api/security/webhook/scan-results
          else
            echo "Dependency check report not found after searching in multiple locations"
            echo "Current directory structure:"
            ls -la ./
            find . -type f -name "*dependency*" -o -name "*check*"
            
            # Send empty results to avoid API error
            PAYLOAD=$(jq -n \
              --arg buildId "$GITHUB_RUN_ID" \
              '{
                "scanType": "dependency-check",
                "buildId": $buildId,
                "data": {
                  "vulnerabilities": {
                    "critical": 0,
                    "high": 0,
                    "medium": 0,
                    "low": 0
                  },
                  "details": []
                }
              }')
              
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "X-Github-Repository: $GITHUB_REPOSITORY" \
              -H "X-Github-Ref: $GITHUB_REF" \
              -H "X-Github-SHA: $GITHUB_SHA" \
              -d "$PAYLOAD" \
              ${API_ENDPOINT}api/security/webhook/scan-results
          fi
      
      # Code security analysis with CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"
          output: sarif-results
        
      # Debug CodeQL output
      - name: Debug CodeQL Output
        run: |
          echo "Looking for SARIF files:"
          find . -name "*.sarif" -type f || echo "No SARIF files found"
          
      # Parse and send CodeQL results
      - name: Parse and send CodeQL results
        run: |
          SARIF_PATH=$(find ${{ github.workspace }} -name "*.sarif" -type f | head -n 1)
          if [ -n "$SARIF_PATH" ]; then
            echo "Found SARIF file at $SARIF_PATH"
            # Parse the SARIF file
            CRITICAL=$(jq '[.runs[].results[] | select(.level == "error")] | length' $SARIF_PATH)
            HIGH=$(jq '[.runs[].results[] | select(.level == "warning")] | length' $SARIF_PATH)
            MEDIUM=$(jq '[.runs[].results[] | select(.level == "note")] | length' $SARIF_PATH)
            LOW=$(jq '[.runs[].results[] | select(.level == "none")] | length' $SARIF_PATH)
            
            # Extract details for top issues
            DETAILS=$(jq '[.runs[].results[] | {rule: .ruleId, severity: .level, message: .message.text, location: .locations[0].physicalLocation.artifactLocation.uri}] | sort_by(.severity) | reverse | .[0:10]' $SARIF_PATH)
            
            # Create payload
            PAYLOAD=$(jq -n \
              --arg buildId "$GITHUB_RUN_ID" \
              --argjson critical "${CRITICAL:-0}" \
              --argjson high "${HIGH:-0}" \
              --argjson medium "${MEDIUM:-0}" \
              --argjson low "${LOW:-0}" \
              --argjson details "$DETAILS" \
              '{
                "scanType": "codeql",
                "buildId": $buildId,
                "data": {
                  "vulnerabilities": {
                    "critical": $critical,
                    "high": $high,
                    "medium": $medium,
                    "low": $low
                  },
                  "details": $details
                }
              }')
            
            # Send to API with Github metadata
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "X-Github-Repository: $GITHUB_REPOSITORY" \
              -H "X-Github-Ref: $GITHUB_REF" \
              -H "X-Github-SHA: $GITHUB_SHA" \
              -d "$PAYLOAD" \
              ${API_ENDPOINT}api/security/webhook/scan-results
          else
            echo "CodeQL SARIF file not found"
            # Send empty results
            PAYLOAD=$(jq -n \
              --arg buildId "$GITHUB_RUN_ID" \
              '{
                "scanType": "codeql",
                "buildId": $buildId,
                "data": {
                  "vulnerabilities": {
                    "critical": 0,
                    "high": 0,
                    "medium": 0,
                    "low": 0
                  },
                  "details": []
                }
              }')
              
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "X-Github-Repository: $GITHUB_REPOSITORY" \
              -H "X-Github-Ref: $GITHUB_REF" \
              -H "X-Github-SHA: $GITHUB_SHA" \
              -d "$PAYLOAD" \
              ${API_ENDPOINT}api/security/webhook/scan-results
          fi
      
      # Secret scanning
      - name: TruffleHog Secret Scanner
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
          format: json
          output: ./trufflehog-results.json
        continue-on-error: true
          
      # Debug TruffleHog output
      - name: Debug TruffleHog Output
        run: |
          echo "Running TruffleHog with debug output to troubleshoot"
          trufflehog filesystem --directory=./ --debug --json > ./trufflehog-debug-results.json || echo "TruffleHog exited with non-zero status"
          ls -la
          if [ -f "./trufflehog-debug-results.json" ]; then
            echo "Debug file exists with size: $(wc -c < ./trufflehog-debug-results.json)"
          else
            echo "No debug file was created"
          fi
          
      # Parse and send TruffleHog results
      - name: Parse and send TruffleHog results
        run: |
          # Check if results file exists
          REPORT_PATH="trufflehog-results.json"
          echo "Looking for TruffleHog results at $REPORT_PATH"
          
          if [ -f "$REPORT_PATH" ]; then
            echo "Found TruffleHog report at $REPORT_PATH"
            # Count findings by severity (TruffleHog doesn't use severity levels, so count by type)
            TOTAL_SECRETS=$(jq '. | length' $REPORT_PATH)
            
            # Extract details for findings
            DETAILS=$(jq '[.[] | {secretType: .DetectorType, file: .SourceMetadata.Data.Filename, line: .SourceMetadata.Data.Line}]' $REPORT_PATH)
            
            # Create payload
            PAYLOAD=$(jq -n \
              --arg buildId "$GITHUB_RUN_ID" \
              --argjson total "${TOTAL_SECRETS:-0}" \
              --argjson details "$DETAILS" \
              '{
                "scanType": "trufflehog",
                "buildId": $buildId,
                "data": {
                  "vulnerabilities": {
                    "total": $total
                  },
                  "details": $details
                }
              }')
            
            # Send to API with Github metadata
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "X-Github-Repository: $GITHUB_REPOSITORY" \
              -H "X-Github-Ref: $GITHUB_REF" \
              -H "X-Github-SHA: $GITHUB_SHA" \
              -d "$PAYLOAD" \
              ${API_ENDPOINT}api/security/webhook/scan-results
          else
            echo "TruffleHog report not found, sending empty results"
            # Create an empty results payload
            PAYLOAD=$(jq -n \
              --arg buildId "$GITHUB_RUN_ID" \
              '{
                "scanType": "trufflehog",
                "buildId": $buildId,
                "data": {
                  "vulnerabilities": {
                    "total": 0
                  },
                  "details": []
                }
              }')
            
            # Send to API with Github metadata
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "X-Github-Repository: $GITHUB_REPOSITORY" \
              -H "X-Github-Ref: $GITHUB_REF" \
              -H "X-Github-SHA: $GITHUB_SHA" \
              -d "$PAYLOAD" \
              ${API_ENDPOINT}api/security/webhook/scan-results
          fi
          
  # Rest of the workflow remains unchanged
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Lint
        run: npm run lint:fix
        
      - name: Test and Coverage
        run: npm run test
        env:
          DB_HOST: ${{secrets.TEST_DB_HOST}}
          DB_PORT: ${{secrets.TEST_DB_PORT}}
          DB_USERNAME: ${{secrets.TEST_DB_USERNAME}}
          DB_PASSWORD: ${{secrets.TEST_DB_PASSWORD}}
          DB_NAME: ${{secrets.TEST_DB_NAME}}
          REFRESH_TOKEN_SECRET: ${{secrets.TEST_REFRESH_TOKEN_SECRET}}
          JWKS_URI: ${{secrets.TEST_JWKS_URI}}
          PRIVATE_KEY: ${{secrets.TEST_PRIVATE_KEY}}
          ADMIN_EMAIL: ${{secrets.TEST_ADMIN_EMAIL}}
          ADMIN_PASSWORD: ${{secrets.TEST_ADMIN_PASSWORD}}
          ADMIN_FIRSTNAME: ${{secrets.TEST_ADMIN_FIRSTNAME}}
          ADMIN_LASTNAME: ${{secrets.TEST_ADMIN_LASTNAME}}
          ADMIN_ADDRESS: ${{secrets.TEST_ADMINADDRESS}}
          
      # Debug coverage output
      - name: Debug Coverage Results
        run: |
          echo "Searching for coverage files:"
          find . -path "*/coverage/*" -type f | grep -E "\.json$" || echo "No coverage JSON files found"
          
      # Send test coverage results
      - name: Parse and send test coverage results
        run: |
          # Try different coverage paths
          COVERAGE_PATH="coverage/coverage-summary.json"
          if [ ! -f "$COVERAGE_PATH" ]; then
            COVERAGE_PATH=$(find . -path "*/coverage/*" -name "*coverage*.json" | head -n 1)
          fi
          
          if [ -n "$COVERAGE_PATH" ] && [ -f "$COVERAGE_PATH" ]; then
            echo "Found coverage report at $COVERAGE_PATH"
            # Parse coverage data
            COVERAGE=$(jq '.total.lines.pct' $COVERAGE_PATH)
            STATEMENTS=$(jq '.total.statements.pct' $COVERAGE_PATH)
            FUNCTIONS=$(jq '.total.functions.pct' $COVERAGE_PATH)
            BRANCHES=$(jq '.total.branches.pct' $COVERAGE_PATH)
            
            # Create payload
            PAYLOAD=$(jq -n \
              --arg buildId "$GITHUB_RUN_ID" \
              --argjson coverage "${COVERAGE:-0}" \
              --argjson statements "${STATEMENTS:-0}" \
              --argjson functions "${FUNCTIONS:-0}" \
              --argjson branches "${BRANCHES:-0}" \
              '{
                "scanType": "test-coverage",
                "buildId": $buildId,
                "data": {
                  "metrics": {
                    "coverage": $coverage,
                    "statements": $statements,
                    "functions": $functions,
                    "branches": $branches
                  }
                }
              }')
            
            # Send to API with Github metadata
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "X-Github-Repository: $GITHUB_REPOSITORY" \
              -H "X-Github-Ref: $GITHUB_REF" \
              -H "X-Github-SHA: $GITHUB_SHA" \
              -d "$PAYLOAD" \
              ${API_ENDPOINT}api/security/webhook/scan-results
          else
            echo "Coverage report not found, sending empty results"
            # Create empty results payload
            PAYLOAD=$(jq -n \
              --arg buildId "$GITHUB_RUN_ID" \
              '{
                "scanType": "test-coverage",
                "buildId": $buildId,
                "data": {
                  "metrics": {
                    "coverage": 0,
                    "statements": 0,
                    "functions": 0,
                    "branches": 0
                  }
                }
              }')
              
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "X-Github-Repository: $GITHUB_REPOSITORY" \
              -H "X-Github-Ref: $GITHUB_REF" \
              -H "X-Github-SHA: $GITHUB_SHA" \
              -d "$PAYLOAD" \
              ${API_ENDPOINT}api/security/webhook/scan-results
          fi
          
      - name: Build-ts
        run: npm run build
        
      - name: Sonar Qube Scan
        uses: sonarsource/sonarqube-scan-action@v5
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
          
      # Parse and send SonarQube results
      - name: Parse and send SonarQube results
        run: |
          # Wait for SonarQube analysis to complete
          sleep 10
          
          # Get SonarQube project key from sonar-project.properties
          if [ -f "sonar-project.properties" ]; then
            SONAR_PROJECT_KEY=$(grep "sonar.projectKey" sonar-project.properties | cut -d'=' -f2)
            echo "Found SonarQube project key: $SONAR_PROJECT_KEY"
            
            # Get metrics from SonarQube API
            SONAR_METRICS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "${{ secrets.SONARQUBE_URL }}/api/measures/component?component=${SONAR_PROJECT_KEY}&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density")
            
            # Parse metrics
            BUGS=$(echo $SONAR_METRICS | jq '.component.measures[] | select(.metric == "bugs") | .value' -r || echo "0")
            VULNERABILITIES=$(echo $SONAR_METRICS | jq '.component.measures[] | select(.metric == "vulnerabilities") | .value' -r || echo "0")
            CODE_SMELLS=$(echo $SONAR_METRICS | jq '.component.measures[] | select(.metric == "code_smells") | .value' -r || echo "0")
            COVERAGE=$(echo $SONAR_METRICS | jq '.component.measures[] | select(.metric == "coverage") | .value' -r || echo "0")
            DUPLICATION=$(echo $SONAR_METRICS | jq '.component.measures[] | select(.metric == "duplicated_lines_density") | .value' -r || echo "0")
            
            # Get issues from SonarQube API
            SONAR_ISSUES=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "${{ secrets.SONARQUBE_URL }}/api/issues/search?componentKeys=${SONAR_PROJECT_KEY}&severities=BLOCKER,CRITICAL,MAJOR&ps=10")
            
            # Format issues
            ISSUES=$(echo $SONAR_ISSUES | jq '[.issues[] | {issue: .message, type: .type, severity: .severity, file: .component}]')
            
            # Create payload
            PAYLOAD=$(jq -n \
              --arg buildId "$GITHUB_RUN_ID" \
              --arg bugs "${BUGS:-0}" \
              --arg vulnerabilities "${VULNERABILITIES:-0}" \
              --arg codeSmells "${CODE_SMELLS:-0}" \
              --arg coverage "${COVERAGE:-0}" \
              --arg duplication "${DUPLICATION:-0}" \
              --argjson issues "$ISSUES" \
              '{
                "scanType": "sonarqube",
                "buildId": $buildId,
                "data": {
                  "metrics": {
                    "bugs": ($bugs | tonumber),
                    "vulnerabilities": ($vulnerabilities | tonumber),
                    "codeSmells": ($codeSmells | tonumber),
                    "coverage": ($coverage | tonumber),
                    "duplication": ($duplication | tonumber)
                  },
                  "issues": $issues
                }
              }')
            
            # Send to API with Github metadata
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "X-Github-Repository: $GITHUB_REPOSITORY" \
              -H "X-Github-Ref: $GITHUB_REF" \
              -H "X-Github-SHA: $GITHUB_SHA" \
              -d "$PAYLOAD" \
              ${API_ENDPOINT}api/security/webhook/scan-results
          else
            echo "sonar-project.properties file not found"
            # Send empty results
            PAYLOAD=$(jq -n \
              --arg buildId "$GITHUB_RUN_ID" \
              '{
                "scanType": "sonarqube",
                "buildId": $buildId,
                "data": {
                  "metrics": {
                    "bugs": 0,
                    "vulnerabilities": 0,
                    "codeSmells": 0,
                    "coverage": 0,
                    "duplication": 0
                  },
                  "issues": []
                }
              }')
              
            curl -X POST \
              -H "Content-Type: application/json" \
              -H "X-Github-Repository: $GITHUB_REPOSITORY" \
              -H "X-Github-Ref: $GITHUB_REF" \
              -H "X-Github-SHA: $GITHUB_SHA" \
              -d "$PAYLOAD" \
              ${API_ENDPOINT}api/security/webhook/scan-results
          fi

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      security-events: write    # Needed for uploading SARIF results
    needs: build-and-test
    env:
      IMAGE_NAME: kunalkharat2004/mernstack_auth_service
      IMAGE_TAG: build-${{ github.run_number }}
      API_ENDPOINT: ${{ secrets.API_ENDPOINT }}  # Added for consistency
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
          
      - name: Build Docker Image
        run: docker build -t ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}} -f docker/prod/Dockerfile .
        
      # Docker image vulnerability scanning with Trivy
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
          format: 'sarif,json'
          output: 'trivy-results.sarif,trivy-results.json'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          
      # Upload Trivy scan results to GitHub Security tab
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          category: container-scanning
          
      # Debug Trivy output
      - name: Debug Trivy Output
        run: |
          echo "Looking for Trivy results:"
          find . -name "*trivy*" -type f || echo "No Trivy files found"
          
      # Parse and send Trivy results
      - name: Parse and send Trivy results
        run: |
          # Parse Trivy JSON report
          REPORT_PATH="trivy-results.json"
          if [ -f "$REPORT_PATH" ]; then
            echo "Found Trivy report at $REPORT_PATH"
            # Count vulnerabilities
