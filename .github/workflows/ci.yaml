name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write    # Needed for uploading SARIF results
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      # Dependency scanning
      - name: Install dependencies
        run: npm ci
        
      # OWASP Dependency-Check for vulnerabilities
      - name: OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'NodeJS-TypeScript-Project'
          path: '.'
          format: 'HTML'
          out: 'reports/dependency-check'
          args: >
            --failOnCVSS 8
            --enableExperimental
            --suppression dependency-check-suppression.xml
            --scan "**/*.js,**/*.ts,package.json,package-lock.json"
            
      # Upload dependency check results as artifacts
      - name: Archive dependency check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/dependency-check
      
      # Code security analysis with CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      
      # Secret scanning
      - name: TruffleHog Secret Scanner
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --debug --only-verified
          # Removed base and head parameters to scan the entire repository instead of just changes
          
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Lint
        run: npm run lint:fix
        
      - name: Test and Coverage
        run: npm run test
        env:
          DB_HOST: ${{secrets.TEST_DB_HOST}}
          DB_PORT: ${{secrets.TEST_DB_PORT}}
          DB_USERNAME: ${{secrets.TEST_DB_USERNAME}}
          DB_PASSWORD: ${{secrets.TEST_DB_PASSWORD}}
          DB_NAME: ${{secrets.TEST_DB_NAME}}
          REFRESH_TOKEN_SECRET: ${{secrets.TEST_REFRESH_TOKEN_SECRET}}
          JWKS_URI: ${{secrets.TEST_JWKS_URI}}
          PRIVATE_KEY: ${{secrets.TEST_PRIVATE_KEY}}
          ADMIN_EMAIL: ${{secrets.TEST_ADMIN_EMAIL}}
          ADMIN_PASSWORD: ${{secrets.TEST_ADMIN_PASSWORD}}
          ADMIN_FIRSTNAME: ${{secrets.TEST_ADMIN_FIRSTNAME}}
          ADMIN_LASTNAME: ${{secrets.TEST_ADMIN_LASTNAME}}
          ADMIN_ADDRESS: ${{secrets.TEST_ADMINADDRESS}}
          
      - name: Build-ts
        run: npm run build
        
      - name: Sonar Qube Scan
        uses: sonarsource/sonarqube-scan-action@v5
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      security-events: write    # Needed for uploading SARIF results
    needs: build-and-test
    env:
      IMAGE_NAME: kunalkharat2004/mernstack_auth_service
      IMAGE_TAG: build-${{ github.run_number }}
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
          
      - name: Build Docker Image
        run: docker build -t ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}} -f docker/prod/Dockerfile .
        
      # Docker image vulnerability scanning with Trivy
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'  # Change to '1' to make the pipeline fail on critical findings
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          
      # Generate Trivy scan summary
      - name: Trivy Scan Summary
        run: |
          echo "## Docker Image Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
          trivy image ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}} --format table --severity CRITICAL,HIGH >> $GITHUB_STEP_SUMMARY
          
      # Upload Trivy scan results to GitHub Security tab
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'container-vulnerability-scan'
          
      - name: Push Docker Image
        run: docker push ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}